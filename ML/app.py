from flask import Flask, request, jsonify
import cv2
import numpy as np
import os
import sys
import json
import traceback

# Add current directory to path for imports
current_dir = os.path.dirname(__file__)
sys.path.insert(0, current_dir)
print(f"‚úÖ Current directory: {current_dir}")
print(f"‚úÖ Python path: {sys.path}")

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health():
    return jsonify({
        "status": "healthy",
        "service": "ML",
        "endpoints": {
            "health": "GET /health",
            "analyze": "POST /analyze"
        }
    })

@app.route('/analyze', methods=['POST'])
def analyze():
    """
    Analyze face image for health metrics
    Expects multipart/form-data with 'file' field
    """
    print("üì® Received request to /analyze")
    if 'file' not in request.files:
        print("‚ùå No file in request")
        return jsonify({"error": "No file provided"}), 400

    file = request.files['file']
    if file.filename == '':
        print("‚ùå Empty filename")
        return jsonify({"error": "No file selected"}), 400

    try:
        # Read and validate image
        print("üñºÔ∏è Reading image data...")
        image_data = file.read()
        nparr = np.frombuffer(image_data, np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        if img is None:
            print("‚ùå Failed to decode image")
            return jsonify({"error": "Invalid image format"}), 400

        print(f"üñºÔ∏è Image loaded successfully, shape: {img.shape}")

        # Try full analysis with mediapipe first, fallback to simple analysis
        try:
            print("üîÑ Attempting full analysis with FaceAnalyzer...")
            from FaceAnalyzer import FaceAnalyzer
            from BatchAnalyzer import SkinHealthReport
            print("‚úÖ FaceAnalyzer and SkinHealthReport imported successfully")

            analyzer = FaceAnalyzer()
            print("üîç Starting face analysis...")
            metrics, visualization = analyzer.analyze(img, visualize=False)
            print(f"‚úÖ Analysis completed, metrics: {list(metrics.keys())}")

            report = SkinHealthReport.generate_report(metrics)
            print("‚úÖ Report generated successfully")

            # Create formatted report string
            report_lines = []
            report_lines.append("=== –ú–ï–¢–†–ò–ö–ò –ê–ù–ê–õ–ò–ó–ê –ö–û–ñ–ò ===")
            for key, value in sorted(metrics.items()):
                report_lines.append(f"{key:20s}: {value:.3f}")

            report_lines.append("\n=== –û–ë–©–ê–Ø –û–¶–ï–ù–ö–ê ===")
            report_lines.append(f"–û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏: {report.get('overall_score', 0):.2%}")

            concerns = report.get('concerns', [])
            if concerns:
                report_lines.append("\n=== –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´ ===")
                for concern in concerns:
                    report_lines.append(f"  - {concern}")

            recommendations = report.get('recommendations', [])
            report_lines.append("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
            for rec in recommendations:
                report_lines.append(f"  - {rec}")

            formatted_report = "\n".join(report_lines)

            print("üìä Returning full analysis results")
            return jsonify({
                "status": "success",
                "analysis_type": "full_analysis",
                "metrics": metrics,
                "report": report,
                "formatted_report": formatted_report,
                "overall_score": report.get('overall_score', 0)
            })

        except ImportError as e:
            print(f"‚ùå Full analysis failed (ImportError): {e}")
            print("üìã Traceback:")
            traceback.print_exc()
            # Fallback to simple analysis
            from SimpleFaceAnalyzer import SimpleFaceAnalyzer
            print("‚úÖ SimpleFaceAnalyzer imported successfully")

            analyzer = SimpleFaceAnalyzer()
            metrics, visualization = analyzer.analyze(img, visualize=False)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
            report_lines = []
            report_lines.append("=== –ë–ê–ó–û–í–´–ô –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===")
            report_lines.append("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (mediapipe –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
            report_lines.append("")

            for key, value in sorted(metrics.items()):
                report_lines.append(f"{key:25s}: {value:.3f}")

            report_lines.append("\n=== –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
            if metrics.get('brightness', 0) < 0.3:
                report_lines.append("  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω–æ–µ")
            elif metrics.get('brightness', 0) > 0.8:
                report_lines.append("  - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–≤–µ—á–µ–Ω–æ")

            if metrics.get('contrast', 0) < 0.3:
                report_lines.append("  - –ù–∏–∑–∫–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å")

            if metrics.get('skin_tone_consistency', 0) < 0.4:
                report_lines.append("  - –ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π —Ç–æ–Ω –∫–æ–∂–∏")

            report_lines.append("\n=== –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò ===")
            report_lines.append("  - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ mediapipe –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–∂–∏")
            report_lines.append("  - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏")
            report_lines.append("  - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–º–µ—Ä—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º")

            formatted_report = "\n".join(report_lines)

            print("üìä Returning simple analysis results")
            return jsonify({
                "status": "success",
                "analysis_type": "simple_analysis",
                "metrics": metrics,
                "formatted_report": formatted_report,
                "note": "Install mediapipe for full facial analysis"
            })

        except Exception as e:
            print(f"‚ùå Analysis error: {e}")
            print("üìã Traceback:")
            traceback.print_exc()
            return jsonify({
                "status": "success",
                "analysis_type": "analysis_error_fallback",
                "formatted_report": f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.\n–û—à–∏–±–∫–∞: {str(e)}",
                "metrics": {}
            })

    except Exception as e:
        print(f"‚ùå General error: {e}")
        print("üìã Traceback:")
        traceback.print_exc()
        return jsonify({"error": f"Analysis failed: {str(e)}"}), 500

if __name__ == '__main__':
    print("üöÄ ML Service starting on http://localhost:5000")
    print("üìä Endpoints:")
    print("  GET  /health - Service health check")
    print("  POST /analyze - Analyze face image")
    app.run(host='0.0.0.0', port=5000, debug=True)
