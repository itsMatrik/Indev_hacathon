import React, { useState } from 'react'
import { jsPDF } from 'jspdf'

// PdfDownloader (Unicode-friendly)
// Uses jsPDF.html to render an offscreen HTML fragment so Cyrillic and other
// Unicode symbols are preserved (avoids jsPDF built-in font limitations).
// Props:
//  - report: { id, result, timestamp, imageURL, imageName }
//  - filename: optional file name (default: report-<id>.pdf)

export default function PdfDownloader({ report, filename }) {
    const [loading, setLoading] = useState(false)

    if (!report) return null

    const outFilename = filename || `report_${report.id || Date.now()}.pdf`

    async function handleDownload() {
        setLoading(true)
        try {
            const pdf = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' })
            const pageWidth = pdf.internal.pageSize.getWidth()
            const pageHeight = pdf.internal.pageSize.getHeight()
            const margin = 12

            // Create an offscreen container with the report HTML.
            const el = document.createElement('div')
            el.style.boxSizing = 'border-box'
            el.style.width = `${(pageWidth - margin * 2)}mm` // hint for html renderer
            el.style.padding = '12px'
            el.style.fontFamily = 'Arial, Helvetica, sans-serif'
            el.style.color = '#111'
            el.style.background = '#fff'
            el.style.fontSize = '12pt'
            el.innerHTML = `
        <div>
          <h1 style="font-size:18pt; margin:0 0 6px 0">HealthPix — Report</h1>
          <div style="font-size:10pt; color:#444; margin-bottom:8px">${report.timestamp ? new Date(report.timestamp).toLocaleString() : ''}</div>
          ${report.imageURL ? `<div style="margin:6px 0 12px 0;text-align:center"><img src="${report.imageURL}" style="max-width:100%; height:auto; border-radius:8px;" /></div>` : ''}
          <pre style="white-space:pre-wrap; word-wrap:break-word; font-size:11pt; line-height:1.35; background:#f8fafc; padding:8px; border-radius:6px;">${escapeHtml(String(report.result || ''))}</pre>
          <div style="font-size:9pt; color:#666; margin-top:12px">Generated by HealthPix — ${new Date().toLocaleString()}</div>
        </div>
      `

            // Put offscreen so fonts render normally
            el.style.position = 'fixed'
            el.style.left = '-9999px'
            el.style.top = '0'
            document.body.appendChild(el)

            // Use jsPDF.html to render the element into the PDF (preserves Cyrillic)
            await new Promise((resolve, reject) => {
                // html2canvas options can be tuned if images are blurry or too large
                pdf.html(el, {
                    x: margin,
                    y: 12,
                    html2canvas: { scale: 1, useCORS: true },
                    callback: function (pdfInstance) {
                        try {
                            pdfInstance.save(outFilename)
                            resolve(true)
                        } catch (e) {
                            reject(e)
                        }
                    },
                    windowWidth: el.scrollWidth,
                })
            })

            // cleanup
            try { document.body.removeChild(el) } catch (e) {}

        } catch (err) {
            console.error('PDF generation error', err)
            alert('Ошибка при формировании PDF: ' + (err?.message || err))
        } finally {
            setLoading(false)
        }
    }

    return (
        <button className="btn" onClick={handleDownload} disabled={loading} aria-label="Скачать PDF">
            {loading ? 'Готовим PDF...' : 'Скачать PDF'}
        </button>
    )
}

// Helper to escape HTML special chars inside the <pre> so user text renders safely
function escapeHtml(text) {
    return text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;')
}
