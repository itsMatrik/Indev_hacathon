// components/ReportView.jsx
import React, { useEffect, useState } from 'react';

const ReportView = ({ report }) => {
    const data = JSON.parse(report.result);
    const [animatedScore, setAnimatedScore] = useState(0);
    const [showDetails, setShowDetails] = useState(false);
    const [isAnimating, setIsAnimating] = useState(true);

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è
    const getScoreColor = (score) => {
        if (score >= 0.8) return '#4CAF50'; // –û—Ç–ª–∏—á–Ω–æ - –∑–µ–ª–µ–Ω—ã–π
        if (score >= 0.6) return '#8BC34A'; // –•–æ—Ä–æ—à–æ - —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        if (score >= 0.4) return '#FFC107'; // –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ - –∂–µ–ª—Ç—ã–π
        return '#F44336'; // –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è - –∫—Ä–∞—Å–Ω—ã–π
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ —Å —Ñ–æ–Ω–æ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
    const getTextColor = (score) => {
        return score >= 0.4 ? '#1a1a1a' : '#ffffff'; // –¢–µ–º–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–µ—Ç–ª—ã—Ö —Ü–≤–µ—Ç–æ–≤, –±–µ–ª—ã–π –¥–ª—è —Ç–µ–º–Ω—ã—Ö
    };

    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –∑–¥–æ—Ä–æ–≤—å—è
    useEffect(() => {
        setIsAnimating(true);
        const duration = 1500;
        const startTime = Date.now();
        const startValue = 0;
        const endValue = data.overall_score;

        const animate = () => {
            const now = Date.now();
            const progress = Math.min((now - startTime) / duration, 1);

            const easeOutQuart = 1 - Math.pow(1 - progress, 4);
            const currentValue = startValue + (endValue - startValue) * easeOutQuart;

            setAnimatedScore(currentValue);

            if (progress < 1) {
                requestAnimationFrame(animate);
            } else {
                setIsAnimating(false);
            }
        };

        requestAnimationFrame(animate);
    }, [data.overall_score]);

    const toggleDetails = () => {
        setShowDetails(!showDetails);
    };

    const scoreColor = getScoreColor(data.overall_score);
    const textColor = getTextColor(data.overall_score);

    return (
        <div className="report-view">
            {/* –ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫ —Å –æ–±—â–∏–º —É—Ä–æ–≤–Ω–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è */}
            <div className="overall-score-card">
                <h3>–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–∂–∏</h3>
                <div className="score-circle-large">
                    <div
                        className="score-progress"
                        style={{
                            background: `conic-gradient(
                ${scoreColor} ${animatedScore * 360}deg, 
                #e0e0e0 0deg
              )`
                        }}
                    >
                        <div className="score-inner">
              <span
                  className="score-percent-large"
                  style={{ color: textColor }}
              >
                {Math.round(animatedScore * 100)}%
              </span>
                            <span
                                className="score-label"
                                style={{ color: textColor }}
                            >
                –æ—Ü–µ–Ω–∫–∞
              </span>
                        </div>
                    </div>
                    {isAnimating && (
                        <div
                            className="score-pulse"
                            style={{ borderColor: scoreColor }}
                        />
                    )}
                </div>
                <div
                    className="score-description"
                    style={{ color: scoreColor }}
                >
                    {data.overall_score >= 0.8 ? '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' :
                        data.overall_score >= 0.6 ? '–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ' :
                            data.overall_score >= 0.4 ? '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ' : '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}
                </div>
            </div>

            {/* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º */}
            <div className="accordion-section">
                <button
                    className={`accordion-header ${showDetails ? 'active' : ''}`}
                    onClick={toggleDetails}
                >
                    <span>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</span>
                    <span className="accordion-arrow">‚ñº</span>
                </button>
                <div className={`accordion-content ${showDetails ? 'show' : ''}`}>
                    <div className="metrics-grid-detailed">
                        {Object.entries(data.metrics).map(([key, value]) => (
                            <div key={key} className="metric-card">
                                <div className="metric-info">
                                    <span className="metric-name">{translateMetric(key)}</span>
                                    <span
                                        className="metric-value-badge"
                                        style={{ backgroundColor: getMetricColor(value) }}
                                    >
                    {Math.round(value * 100)}%
                  </span>
                                </div>
                                <div className="metric-bar-detailed">
                                    <div
                                        className="metric-fill-detailed"
                                        style={{
                                            width: `${value * 100}%`,
                                            backgroundColor: getMetricColor(value)
                                        }}
                                    />
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
            <div className="recommendations-section">
                <h4>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É</h4>
                <div className="recommendations-grid">
                    {data.report.recommendations.map((rec, index) => (
                        <div key={index} className="recommendation-card">
                            <div className="recommendation-icon">üí°</div>
                            <div className="recommendation-text">{rec}</div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function translateMetric(key) {
    const translations = {
        'pigmentation': '–ü–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è',
        'texture_roughness': '–ù–µ—Ä–æ–≤–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—ã',
        'puffiness': '–û—Ç–µ—á–Ω–æ—Å—Ç—å',
        'pore_size': '–†–∞–∑–º–µ—Ä –ø–æ—Ä',
        'redness': '–ü–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏–µ',
        'dark_circles': '–¢—ë–º–Ω—ã–µ –∫—Ä—É–≥–∏',
        'mild_acne': '–õ—ë–≥–∫–∏–µ –∞–∫–Ω–µ',
        'moderate_acne': '–£–º–µ—Ä–µ–Ω–Ω—ã–µ –∞–∫–Ω–µ',
        'severe_acne': '–¢—è–∂—ë–ª—ã–µ –∞–∫–Ω–µ',
        'wrinkles': '–ú–æ—Ä—â–∏–Ω—ã',
        'vascularity': '–°–æ—Å—É–¥–∏—Å—Ç—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è',
        'paleness': '–ë–ª–µ–¥–Ω–æ—Å—Ç—å',
        'jaundice': '–ñ–µ–ª—Ç–∏–∑–Ω–∞',
        'oiliness': '–ñ–∏—Ä–Ω–æ—Å—Ç—å',
        'acne_spots': '–ü—è—Ç–Ω–∞ –æ—Ç –∞–∫–Ω–µ',
        'cyanosis': '–¶–∏–∞–Ω–æ–∑'
    };
    return translations[key] || key;
}

function getMetricColor(value) {
    if (value < 0.3) return '#4CAF50';
    if (value < 0.6) return '#FFC107';
    if (value < 0.8) return '#FF9800';
    return '#F44336';
}

export default ReportView;