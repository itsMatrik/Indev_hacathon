import React, { useEffect, useState } from 'react'
import Auth from './components/Auth'
import CameraUpload from './components/CameraUpload'
import { readToken, clearToken, getAiStatus, getHistory } from './api'




export default function App() {
    // MODIFIED: Default theme is now 'dark'
    const [theme, setTheme] = useState('dark')
    const [token, setToken] = useState(readToken())
    const [report, setReport] = useState(null)
    const [history, setHistory] = useState([])
    const [showSplash, setShowSplash] = useState(true)
    const [fadeOut, setFadeOut] = useState(false)

    // NEW: Effect to apply the theme class to the body
    useEffect(() => {
        document.body.classList.remove('light', 'dark')
        document.body.classList.add(theme)
    }, [theme])

    // NEW: Function to toggle the theme
    function toggleTheme() {
        setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'))
    }

    // MODIFIED: Splash screen logic with fade-out animation
    useEffect(() => {
        const t1 = setTimeout(() => {
            setFadeOut(true) // Start fade-out animation
        }, 2000)

        const t2 = setTimeout(() => {
            setShowSplash(false) // Remove from DOM after animation
        }, 2500) // 2000 + 500ms for animation duration

        return () => {
            clearTimeout(t1)
            clearTimeout(t2)
        }
    }, [])

    useEffect(() => {
        if (!token) return setHistory([])
        getHistory().then((r) => setHistory(r.data || [])).catch(() => {})
    }, [token])

    function onLogin(tkn) {
        setToken(tkn)
    }

    function onLogout() {
        clearToken()
        setToken(null)
        setReport(null)
        setHistory([])
    }

    function onNewReport(r) {
        setReport(r)
        setHistory((h) => [{ id: r.id, result: r.result, date: r.timestamp }, ...h])
    }

    async function checkAI() {
        try {
            const r = await getAiStatus()
            alert('AI: ' + r.data.ai_status)
        } catch (e) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AI')
        }
    }

    // MODIFIED: Function to download PDF directly
    function saveReportPdf(r) {
        // Create HTML content for the PDF
        const html = `
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <title>HealthPix Report</title>
                <style>
                    body { 
                        font-family: Arial, sans-serif; 
                        margin: 20px; 
                        line-height: 1.6;
                        color: #333;
                    }
                    h1 { 
                        color: #2563eb; 
                        text-align: center; 
                        margin-bottom: 10px;
                    }
                    .date { 
                        text-align: center; 
                        color: #666; 
                        margin-bottom: 30px;
                    }
                    img { 
                        max-width: 100%; 
                        height: auto; 
                        display: block; 
                        margin: 20px auto;
                        border-radius: 8px;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                    }
                    pre { 
                        background: #f5f5f5; 
                        padding: 20px; 
                        border-radius: 8px; 
                        white-space: pre-wrap; 
                        word-wrap: break-word;
                        border-left: 4px solid #2563eb;
                        margin-top: 20px;
                    }
                    .footer {
                        text-align: center;
                        margin-top: 30px;
                        color: #666;
                        font-size: 14px;
                    }
                </style>
            </head>
            <body>
                <h1>HealthPix Report</h1>
                <div class="date">${new Date(r.timestamp).toLocaleString()}</div>
                <img src="${r.imageURL}" alt="Medical Analysis" />
                <pre>${r.result}</pre>
                <div class="footer">Generated by HealthPix - AI Health Analysis</div>
            </body>
            </html>
        `

        // Create a Blob with the HTML content
        const blob = new Blob([html], { type: 'text/html' })
        const url = URL.createObjectURL(blob)

        // Create a temporary link element to trigger download
        const link = document.createElement('a')
        link.href = url

        // Generate filename with timestamp
        const timestamp = new Date(r.timestamp).toISOString().split('T')[0]
        link.download = `healthpix-report-${timestamp}.html`

        // Append to body, click and remove
        document.body.appendChild(link)
        link.click()
        document.body.removeChild(link)

        // Clean up URL object
        URL.revokeObjectURL(url)
    }

    function shareReport(r) {
        const id = Date.now().toString(36)
        localStorage.setItem(`shared_report_${id}`, JSON.stringify(r))
        const url = `${window.location.origin}/share/${id}`
        navigator.clipboard?.writeText(url).then(() => alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞:\n' + url))
    }

    useEffect(() => {
        const path = window.location.pathname
        if (path.startsWith('/share/')) {
            const id = path.split('/share/')[1]
            const payload = localStorage.getItem(`shared_report_${id}`)
            if (payload) setReport(JSON.parse(payload))
        }
    }, [])

    function goHome() {
        setReport(null)
    }

    if (showSplash) {
        return (
            <div className={`splash ${fadeOut ? 'fade-out' : ''}`}>
                <div className="logo">HealthPix</div>
                <div className="subtitle">–ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ —Å–µ–ª—Ñ–∏</div>
            </div>
        )
    }

    if (!token) {
        return (
            <div className="page center">
                <Auth onLogin={onLogin} />
            </div>
        )
    }

    return (
        <div className="page">
            <header className="top">
                <div className="brand" style={{ cursor: 'pointer' }} onClick={goHome}>HealthPix</div>
                <div className="actions">
                    {/* NEW: Theme toggle button */}
                    <button
                        className="btn ghost"
                        onClick={toggleTheme}
                        style={{ padding: '0 12px', fontSize: '24px' }}
                        aria-label="Toggle theme"
                    >
                        {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
                    </button>
                    <button className="btn " onClick={checkAI}>AI status</button>
                    <button className="btn outline" onClick={onLogout}>–í—ã–π—Ç–∏</button>
                </div>
            </header>

            <main className="container">
                <section className="left">
                    {!report ? (
                        <CameraUpload onNewReport={onNewReport} />
                    ) : (
                        <div className="card report">
                            <h3>–û—Ç—á–µ—Ç</h3>
                            <div className="report-meta">{new Date(report.timestamp).toLocaleString()}</div>
                            <div className="report-body">
                                <img src={report.imageURL} alt="report" style={{ maxWidth: '100%', borderRadius: 8 }} />
                                <pre>{report.result}</pre>
                            </div>
                            <div className="row gap" style={{ marginTop: 12 }}>
                                <button className="btn" >–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç</button>
                                <button className="btn outline" onClick={() => shareReport(report)}>–°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
                                <button className="btn ghost" onClick={goHome}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</button>
                            </div>
                        </div>
                    )}
                </section>

                <aside className="right">
                    <div className="card">
                        <h4>–ò—Å—Ç–æ—Ä–∏—è</h4>
                        {history.length === 0 ? <div className="hint">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div> : (
                            <ul className="history-list">
                                {history.map((h) => (
                                    <li key={h.id}>
                                        <div className="hist-result">{h.result}</div>
                                        <div className="hist-date">{new Date(h.date).toLocaleString()}</div>
                                    </li>
                                ))}
                            </ul>
                        )}
                    </div>
                </aside>
            </main>
        </div>
    )
}